'use strict';

var rp = require('request-promise');

var makeRequest = function makeRequest(_ref) {
	var operation = _ref.operation,
	    parameters = _ref.parameters,
	    body = _ref.body,
	    API_KEY = _ref.API_KEY;

	var headers = {
		'Ocp-Apim-Subscription-Key': API_KEY
	};
	var path = operation.uriTemplate;
	operation.parameters.forEach(function (param) {
		if (parameters[param.name] && param.type == 1) {
			path = path.split('{' + param.name + '}').join(parameters[param.name]);
			parameters[param.name] = undefined;
		}
	});

	var uri = operation.scheme + '://' + operation.host + '/' + operation.path;
	var options = {
		uri: uri,
		method: operation.method,
		headers: headers,
		qs: parameters,
		json: true,
		body: body
	};
	return rp(options);
};

var verifyParameters = function verifyParameters(operation, actual) {

	return new Promise(function (resolve, reject) {

		var expected = operation.parameters;
		var requiredPropsNotPresent = expected.filter(function (param) {
			return param.required;
		}).filter(function (param) {
			return !actual[param.name];
		});

		if (requiredPropsNotPresent.length !== 0) {
			if (requiredPropsNotPresent.length > 1) {
				reject(new Error('Required parameters ' + JSON.stringify(requiredPropsNotPresent) + ' were not present in "' + operation.serviceName + '" "' + operation.name + '" request.'));
			} else {
				reject(new Error('Required parameter "' + requiredPropsNotPresent[0] + '" was not present in "' + operation.serviceName + '" "' + operation.name + '" request'));
			}
		} else {
			resolve();
		}
	});
};

module.exports = { makeRequest: makeRequest, verifyParameters: verifyParameters };